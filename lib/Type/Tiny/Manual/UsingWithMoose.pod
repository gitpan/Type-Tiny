=pod

=encoding utf-8

=head1 NAME

Type::Tiny::Manual::UsingWithMoose - how to use Type::Tiny and Type::Library with Moose

=head1 SYNOPSIS

   {
      package Person;
      
      use Moose;
      use Types::Standard -moose, qw( Str Int );
      use Type::Utils qw( declare as where inline_as coerce from );
      
      has name => (
         is      => "ro",
         isa     => Str,
      );
      
      my $PositiveInt = declare
         as        Int,
         where     {  $_ > 0  },
         inline_as { "$_ =~ /^0-9]\$/ and $_ > 0" };
      
      coerce $PositiveInt, from Int, q{ abs $_ };
      
      # Note that $PositiveInt is a Type::Tiny object, not a
      # Moose::Meta::TypeConstraint object, so when passing it
      # into Moose's "has" function you need to get the Moose
      # equivalent type using "->moose_type".
      #
      has age => (
         is      => "ro",
         isa     => $PositiveInt->moose_type,
         coerce  => 1,
         writer  => "_set_age",
      );
      
      sub get_older {
         my $self = shift;
         my ($years) = @_;
         $PositiveInt->assert_valid($years);
         $self->_set_age($self->age + $years);
      }
   }

=head1 DESCRIPTION

This document has not yet been written. For examples using Type::Tiny with
L<Moose> see the SYNOPSIS sections of L<Type::Tiny> and L<Type::Library>,
and the files C<< moose.t >> and C<< moose-coercion.t >> in the Type-Tiny
L<test suite|https://bitbucket.org/tobyink/p5-type-tiny/src/tip/t>.

=head1 AUTHOR

Toby Inkster E<lt>tobyink@cpan.orgE<gt>.

=head1 COPYRIGHT AND LICENCE

This software is copyright (c) 2013 by Toby Inkster.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=head1 DISCLAIMER OF WARRANTIES

THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.

=cut
