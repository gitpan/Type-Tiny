  * Type-Tiny
      * documentation
          * usage with Mouse
              * using type constraints from libraries
              * creating type constraints using Type::Utils
              * coercions
          * better coercion docs
      * new type constraints for Types::Standard
          * Chars - i.e. strings where the UTF-8 bit is on
          * Bytes - i.e. strings where the UTF-8 bit is off
          * Tied - i.e. references to tied variables. Parameterized:
            Tied["Some::Package"]
          * Varchar[length]
          * steal from MooseX-Types-Common?
          * steal from MooseX-Types-Ro?
          * OptList[Undef|Ref]
      * coercion
          * Auto-coercion
              * needs documenting
          * First-class coercions
              * moar docs
              * moar tests
      * new distribution: Params-Type (name?)
          * already a first draft (called Type::Check) in p5-type-tiny
          * documentation
          * test cases
          * benchmark versus Params::Validate
              * much faster, even compared to Params::Validate::XS
      * improve speed for non-inlineable type constraints and coercions
          * maybe use eval context idea from Type::Check
      * Type-Tiny could be used as a backend for Scalar::Does?
          * if not, certainly a SEE ALSO
