- sanity check type names
- test cases
	- inlining of class, role and duck types
	- inlining of unions, intersections and complements
	- inlining for MooseX::Types::Structured
	- Type::Standard::Overload
	- Type::Tiny::Enum
- documentation
	- document overloading for Type::Coercion
	- write manual
- implement has_coercion_for_type; this means I need to be able to figure out when $type1 >= $type2
- create "plus_coercions" and "minus_coercions" methods for Type::Tiny which create a new anonymous subtypewith additional/fewer coercions
- stdlib: write inlining code for MooseX::Types::Structured-inspired types
- custom Moose/Mouse inflation for stdlib
