Type-Tiny
=========

Created:      2013-03-23
Home page:    <https://metacpan.org/release/Type-Tiny>
Bug tracker:  <http://rt.cpan.org/Dist/Display.html?Queue=Type-Tiny>
Maintainer:   Toby Inkster <mailto:tobyink@cpan.org>

0.000_11  2013-04-11

 - (Bugfix) Fix prototype for Type::Utils::as.
 - BIG, AWESOME CHANGE: no longer need to pass '-moose' parameter when
   importing a library into a Moose class; only Mouse needs that treatment
   now.

0.000_10  2013-04-09

 - (Bugfix) Fix incorrect Test::Requires line in 'mouse-coercion.t'.
 - Improvements to has_coercion_for_{type,value} from Type::Coercion.

0.000_09  2013-04-08

 - (Addition) Bundle benchmarking scripts.
 - (Documentation) Fill in the Usage with Moose section of the fine manual.
 - (Packaging) Tidy up the 'examples' directory.
 - (Packaging) When generating Moose/Mouse constraints from Type::Tiny
   objects, prefer to generate anonymous ones.

0.000_08  2013-04-07

 - (Addition) Types::TypeTiny::to_TypeTiny can be used to coerce a Moose
   type constraint object to Type::Tiny.
 - Most parts of the API that accept Type::Tiny objects (e.g.
   Type::Utils::from()) now also accept Moose::Meta::TypeConstraint
   objects.
 - Rewrite most of the functions exported by Type::Library-based type
   libraries to cope better with being used mid-list.

0.000_07  2013-04-06

 - (Addition) Type::Coercion::Union - automatically handles coercion to
   union types.
 - (Bugfix) Fix inlining for Type::Tiny::Intersection.
 - (Bugfix) Fix inlining of certain conditionals into coercion code.
 - (Bugfix) Types within libraries, if accessed directly rather than
   exported, did not accept parameters.
 - (Documentation) Document constructor for Type::Tiny::Class.
 - (Packaging) More test cases.

0.000_06  2013-04-05

 - (Addition) In Moo, type assertions and coercions are now inlined.
 - (Addition) Monkey patch Moose::Meta::TypeConstraint to be able to
   retrieve Type::Tiny constraints from inflated Moose constraints.
 - (Addition) Type::Tiny now has an 'inline_assert' function.
 - (Documentation) Improved documentation of parameterization attributes.
 - (Documentation) Section in manual comparing Type::Tiny with various
   other type library frameworks.
 - (Documentation) Using Type::Tiny with Moo added to manual.
 - (Packaging) More test cases.
 - Footprint reduction: Type::Tiny and Type::Coercion no longer use if.pm.
 - Footprint reduction: Type::Tiny no longer triggers Perl to load its
   Unicode tables (unless you create a type constraint with a non-ASCII
   type name).
 - Footprint reduction: Type::Tiny, Type::Library and Type::Coerce no
   longer automatically load Types::Standard and Type::Utils.

0.000_05  2013-04-04

 - (Addition) Factor out some functions from test suite into a new module:
   Test::TypeTiny.
 - (Bugfix) Fix is_parameterized.
 - (Bugfix) Get Mouse coercions working.
 - (Packaging) Rearrange test suite slightly.
 - Allow null type constraints with no parent type (e.g. 'Any' in
   Types::Standard) to be inlined.
 - Don't die with full stack trace.
 - Rename Type::Standard module to Types::Standard.
 - Sanity checks for type constraint names.
 - Types::TypeTiny bootstrapping library now takes care of vaious internal
   type checking requirements.

0.000_04  2013-04-03

 - (Addition) Finally implement Type::Coercion's has_coercion_for_type
   method.
 - (Addition) Type::Tiny equals/is_subtype_of/is_supertype_of/is_a_type_of
   methods for type constraint comparisons.
 - (Addition) Type::Tiny plus_coercions/minus_coercions/no_coercions
   methods for creating subtypes with different sets of coercions.
 - Allow coercion code to be expressed as a string; quite a bit faster.
 - Create and use compiled coercions; somewhat faster.

0.000_03  2013-04-03

 - (Addition) Inlined type constraints for all of Type::Standard.
 - (Addition) Test cases for ScalarRef[`a].
 - (Bugfix) Fix the crashing t/moo-inflation.t test case.
 - (Documentation) Document Type::Coercion's overloading.
 - Create and use compiled type constraint checks; much faster!
 - Make sure Type::Standard's Moose-like built-ins get inflated to real
   Moose built-in types.
 - Use more unique stringification for %Moo::HandleMoose::TYPE_MAP keys.

0.000_02  2013-04-02

 - (Addition) StrMatch added to Type::Standard.
 - (Addition) use Type::Library -base
 - (Addition) use Type::Library -declare
 - (Bugfix) Anchor enum regexps to beginning and end of string.
 - (Documentation) Beginnings of Type::Tiny::Manual.

0.000_01  2013-04-02  # Developer preview


